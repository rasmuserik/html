// Generated by CoffeeScript 1.6.3
(function() {
  var TouchHandler, View, XHR, ajax, app, cacheFrames, controller, currentTestId, deepCopy, defaultModel, elemAddEventListener, expect, express, extend, incrementalLoad, legacy, log, nextTick, ontouch, port, startTime, syncLog, t0, tapDist2, tapLength, testDone, testModel, testTouchHandler, testView, testcount,
    __slice = [].slice;

  if (typeof isNodeJs === "undefined" || typeof runTest === "undefined") {
    (function() {
      var root;
      root = typeof global === "undefined" ? window : global;
      if (typeof isNodeJs === "undefined") {
        root.isNodeJs = typeof window === "undefined";
      }
      if (typeof runTest === "undefined") {
        return root.runTest = true;
      }
    })();
  }

  if (!isNodeJs) {
    nextTick = function(fn) {
      return setTimeout(fn, 0);
    };
    if (runTest) {
      testcount = 6;
      currentTestId = 0;
      console.log("1.." + testcount);
      testDone = 0;
      expect = function(expected, result, description) {
        if (JSON.stringify(expected) === JSON.stringify(result)) {
          console.log("ok " + (++currentTestId) + " " + (description || ""));
          log("test ok", currentTestId, description, expected);
        } else {
          console.log(("not ok " + (++currentTestId) + " + " + (description || "")) + ("expected:" + (JSON.stringify(expected))) + ("got:" + (JSON.stringify(result))));
          log("test failed", currentTestId, description, expected, result);
        }
        ++testDone;
        if (testDone === testcount) {
          log("tests done");
          return syncLog();
        }
      };
    }
    if (Object.keys == null) {
      Object.keys = function(obj) {
        var key, _, _results;
        _results = [];
        for (key in obj) {
          _ = obj[key];
          _results.push(key);
        }
        return _results;
      };
    }
    XHR = XMLHttpRequest;
    legacy = false;
    if (typeof (new XHR).withCredentials !== "boolean") {
      legacy = true;
      XHR = XDomainRequest;
    }
    ajax = function(url, data, cb) {
      var xhr;
      xhr = new XHR();
      xhr.onerror = function(err) {
        return typeof cb === "function" ? cb(err || true) : void 0;
      };
      xhr.onload = function() {
        return typeof cb === "function" ? cb(null, xhr.responseText) : void 0;
      };
      xhr.open((data ? "POST" : "GET"), url, !!cb);
      xhr.send(data);
      if (!cb) {
        return xhr.responseText;
      }
    };
    if (runTest) {
      nextTick(function() {
        ajax("//cors-test.appspot.com/test", void 0, function(err, result) {
          return expect(result, '{"status":"ok"}', "async ajax");
        });
        return ajax("//cors-test.appspot.com/test", "foo", function(err, result) {
          return expect(result, '{"status":"ok"}', "async ajax post");
        });
      });
    }
    extend = function(target, source) {
      var key, val;
      for (key in source) {
        val = source[key];
        target[key] = val;
      }
      return target;
    };
    if (runTest) {
      nextTick(function() {
        var a;
        a = {
          a: 1,
          b: 2
        };
        expect(extend(a, {
          b: 3,
          c: 4
        }), {
          a: 1,
          b: 3,
          c: 4
        }, "extend");
        return expect(a, {
          a: 1,
          b: 3,
          c: 4
        }, "extend");
      });
    }
    deepCopy = function(obj) {
      var e, key, result, val, _i, _len;
      if (typeof obj === "object") {
        if (obj.constructor === Array) {
          result = [];
          for (_i = 0, _len = obj.length; _i < _len; _i++) {
            e = obj[_i];
            result.push(deepCopy(e));
          }
        } else {
          result = {};
          for (key in obj) {
            val = obj[key];
            result[key] = deepCopy(val);
          }
        }
        return result;
      } else {
        return obj;
      }
    };
    if (runTest) {
      nextTick(function() {
        var a, b;
        a = {
          a: [1, 2, 3]
        };
        b = deepCopy(a);
        b.b = "c";
        b.a[1] = 3;
        expect(a, {
          a: [1, 2, 3]
        }, "deepcopy original unmutated");
        return expect(b, {
          a: [1, 3, 3],
          b: "c"
        }, "deepcopy copy with mutations");
      });
    }
    elemAddEventListener = function(elem, type, fn) {
      if (elem.addEventListener) {
        return elem.addEventListener(type, fn, false);
      } else {
        return elem.attachEvent("on" + type, fn);
      }
    };
    log = void 0;
    syncLog = void 0;
    (function() {
      var logData, logId, logSyncing, logUrl, logsBeforeSync, syncDelay;
      logId = Math.random();
      logUrl = "/api/log";
      logData = [];
      logSyncing = false;
      logsBeforeSync = 200;
      syncDelay = 400;
      syncLog = function() {
        var e, logContent;
        if (!logSyncing) {
          try {
            logContent = JSON.stringify(logData);
          } catch (_error) {
            e = _error;
            logContent = "Error stringifying log";
          }
          logSyncing = logData;
          logData = [];
          return ajax(logUrl, logContent, function(err, result) {
            setTimeout((function() {
              return logSyncing = false;
            }), syncDelay);
            if (err) {
              log("logsync error", err);
              return logData = logSyncing.concat(logData);
            } else {
              logData.push([+(new Date()), "log sync'ed", logId, logData.length]);
              if ((legacy || runTest) && logData.length > 1) {
                return syncLog();
              }
            }
          });
        }
      };
      log = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        logData.push([+(new Date())].concat(__slice.call(args)));
        if (logData.length > logsBeforeSync || legacy || runTest) {
          nextTick(syncLog);
        }
        return args;
      };
      nextTick(function() {
        elemAddEventListener(window, "error", function(err) {
          return log("window.onerror ", String(err));
        });
        return elemAddEventListener(window, "beforeunload", function() {
          var e;
          log("window.beforeunload");
          try {
            ajax(logUrl, JSON.stringify(logData));
          } catch (_error) {
            e = _error;
            void 0;
          }
          return void 0;
        });
      });
      return log("starting", logId, window.performance);
    })();
  }

  if (!isNodeJs) {
    defaultModel = {
      frames: {
        current: 0,
        normal: {
          width: void 0,
          height: void 0,
          urls: []
        },
        zoom: {
          width: void 0,
          height: void 0,
          urls: []
        }
      },
      spinOnLoadFPS: 30,
      fullscreen: false,
      zoom: {
        lensSize: 200,
        enabled: false,
        x: void 0,
        y: void 0
      },
      showLogo: true,
      loading: true,
      domElem: {
        width: void 0,
        height: void 0,
        domId: void 0
      }
    };
    if (runTest) {
      testModel = deepCopy(defaultModel);
      (function() {
        var i, _i, _results;
        testModel.frames.zoom.width = 1000;
        testModel.frames.zoom.height = 447;
        testModel.width = testModel.frames.normal.width = 500;
        testModel.height = testModel.frames.normal.height = 223;
        _results = [];
        for (i = _i = 1; _i <= 52; i = _i += 1) {
          testModel.frames.normal.urls.push("testdata/" + i + ".normal.jpg");
          _results.push(testModel.frames.zoom.urls.push("testdata/" + i + ".jpg"));
        }
        return _results;
      })();
    }
  }

  if (!isNodeJs) {
    View = function(model, domId) {
      var buttonStyle, domElem, elemNames, i, key, _, _i, _ref, _ref1;
      this.model = model;
      domElem = document.getElementById(domId);
      if (!domElem) {
        throw log("couldn't find dom element for view", domId);
      }
      this.defaultWidth = model.width || domElem.offsetWidth;
      this.defaultHeight = model.height || domElem.offsetHeight;
      this.style = {
        root: {
          textAlign: "left",
          webkitTapHighlightColor: "rgba(0,0,0,0)",
          webkitUserSelect: "none",
          display: "inline-block",
          cursor: "url(res/cursor_rotate.cur),move"
        },
        image: {
          width: "100%",
          height: "100%"
        },
        zoomLens: {
          display: "block",
          position: "absolute",
          overflow: "hidden",
          width: this.model.zoom.lensSize,
          height: this.model.zoom.lensSize,
          border: "0px solid black",
          cursor: "default",
          backgroundColor: !legacy ? "rgba(100,100,100,0.8)" : void 0,
          borderRadius: this.model.zoom.lensSize / 2,
          boxShadow: "0px 0px 40px 0px rgba(255,255,255,.7) inset, 4px 4px 9px 0px rgba(0,0,0,0.5)",
          backgroundRepeat: "no-repeat"
        },
        logo: {
          position: "absolute",
          opacity: "0.7",
          textShadow: "0px 0px 5px white",
          color: "#333",
          transition: "opacity 0.5s"
        },
        btnFull: {
          position: "absolute"
        },
        btnZoom: {
          position: "absolute"
        },
        spinner: {
          position: "absolute",
          top: "49%",
          left: "49%"
        }
      };
      buttonStyle = {
        position: "absolute",
        color: "#333",
        opacity: "0.7",
        textShadow: "0px 0px 5px white",
        backgroundColor: !legacy ? "rgba(255,255,255,0)" : void 0,
        fontSize: this.defaultHeight * .08,
        padding: this.defaultHeight * .02
      };
      extend(this.style.btnFull, buttonStyle);
      extend(this.style.btnZoom, buttonStyle);
      this.elems = {};
      this.elems.root = document.createElement("div");
      this.elems.root.innerHTML = '<img>' + '<div class="onetwo360-zoom-lens"></div>' + '<i class="icon-OneTwo360Logo"></i>' + '<i class="fa fa-fullscreen onetwo360-fullscreen-button"></i>' + '<i class="fa fa-search onetwo360-fullscreen-button"></i>' + '<img src="spinner.gif">';
      domElem.appendChild(this.elems.root);
      elemNames = Object.keys(this.style);
      for (i = _i = 1, _ref = elemNames.length - 1; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        this.elems[elemNames[i]] = this.elems.root.childNodes[i - 1];
      }
      this.width = void 0;
      this.height = void 0;
      this.showLogo = void 0;
      this.imgSrc = void 0;
      this.elemStyle = {};
      this.styleCache = {};
      _ref1 = this.elems;
      for (key in _ref1) {
        _ = _ref1[key];
        this.elemStyle[key] = this.elems[key].style;
        this.styleCache[key] = {};
      }
      this.update();
      return this;
    };
    View.prototype.update = function() {
      var self;
      if (this.updateReq) {
        return;
      }
      this.updateReq = true;
      self = this;
      return nextTick((function() {
        self._update();
        return self.updateReq = false;
      }));
    };
    View.prototype._update = function() {
      this._fullscreen();
      this._root();
      this._overlays();
      this._zoomLens();
      this._image();
      this._applyStyle();
      return log("View#_update'd", this.top, this.left, this.width, this.height);
    };
    View.prototype._fullscreen = function() {
      var boundingRect, imHeight, imRatio, imWidth, ratio;
      if (this.model.fullscreen) {
        extend(this.style.root, {
          position: "absolute",
          zIndex: "10000",
          top: window.scrollY,
          left: window.scrollX,
          width: window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth,
          height: window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight
        });
        imWidth = this.model.frames.normal.width;
        imHeight = this.model.frames.normal.height;
        imRatio = imWidth / imHeight;
        ratio = this.style.root.width / this.style.root.height;
        extend(this.style.image, {
          position: "absolute",
          width: this.style.root.width * Math.min(1, imRatio / ratio),
          height: this.style.root.height * Math.min(1, ratio / imRatio)
        });
        extend(this.style.image, {
          left: (this.style.root.width - this.style.image.width) / 2,
          top: (this.style.root.height - this.style.image.height) / 2
        });
      } else {
        extend(this.style.root, {
          position: "relative",
          zIndex: "0",
          top: 0,
          left: 0,
          width: this.defaultWidth,
          height: this.defaultHeight
        });
        extend(this.style.image, {
          position: "relative",
          top: 0,
          left: 0,
          width: this.defaultWidth,
          height: this.defaultHeight
        });
        boundingRect = this.elems.root.getBoundingClientRect();
      }
      this.top = this.style.image.top;
      this.left = this.style.image.left;
      this.width = this.style.image.width;
      return this.height = this.style.image.height;
    };
    View.prototype._root = function() {
      return void 0;
    };
    View.prototype._overlays = function() {
      var btnStyle;
      this.style.spinner.display = this.model.loading ? "block" : "none";
      extend(this.style.logo, {
        top: this.height * .35,
        left: this.width * .5 - this.height * .3,
        fontSize: this.height * .2,
        opacity: this.model.showLogo ? "1" : "0"
      });
      btnStyle = {
        top: this.top + this.height - this.width * .1,
        fontSize: this.width * .06,
        padding: this.height * .02
      };
      extend(this.style.btnFull, btnStyle);
      this.style.btnFull.left = this.left + this.width * .90;
      extend(this.style.btnZoom, btnStyle);
      return this.style.btnZoom.left = this.left + this.width * .02;
    };
    View.prototype._zoomLens = function() {
      var bgX, bgY, current, h, img, left, size, top, url, w,
        _this = this;
      if (this.model.zoom.enabled) {
        current = this.model.frames.current;
        url = this.model.frames.zoom.urls[current];
        w = this.model.frames.zoom.width;
        h = this.model.frames.zoom.height;
        size = this.model.zoom.lensSize;
        img = new Image();
        img.src = url;
        if (!img.complete) {
          img.onload = function() {
            return _this.update();
          };
          url = this.model.frames.normal.urls[current];
        }
        left = Math.max(0, Math.min(this.width, this.model.zoom.x - this.left));
        top = Math.max(0, Math.min(this.height, this.model.zoom.y - this.top));
        bgX = -left / this.width * (w + size) + size / 2;
        bgY = -top / this.height * (h + size) + size / 2;
        return extend(this.style.zoomLens, {
          position: "absolute",
          display: "block",
          left: left - size / 2 + this.left,
          top: top - size / 2 + this.top,
          backgroundImage: "url(" + url + ")",
          backgroundSize: "" + (w + size) + "px " + (h + size) + "px",
          backgroundPosition: "" + bgX + "px " + bgY + "px"
        });
      } else {
        return extend(this.style.zoomLens, {
          display: "none"
        });
      }
    };
    View.prototype._image = function() {
      var imgSrc;
      imgSrc = this.model.frames.normal.urls[this.model.frames.current];
      if (imgSrc !== void 0 && imgSrc !== this.imgSrc) {
        this.elems.image.src = imgSrc;
        return this.imgSrc = imgSrc;
      }
    };
    View.prototype._applyStyle = function() {
      var css, e, elemId, key, val, _ref, _results;
      _ref = this.style;
      _results = [];
      for (elemId in _ref) {
        css = _ref[elemId];
        _results.push((function() {
          var _results1;
          _results1 = [];
          for (key in css) {
            val = css[key];
            if (this.styleCache[elemId][key] !== val) {
              if (typeof val === "number") {
                val = val + "px";
              }
              if (true || !runTest) {
                this.elemStyle[elemId][key] = val;
              } else {
                try {
                  this.elemStyle[elemId][key] = val;
                } catch (_error) {
                  e = _error;
                  log("Cannot set " + key + ":" + val + " on " + elemId);
                  throw e;
                }
              }
              _results1.push(this.styleCache[elemId][key] = val);
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };
    if (runTest) {
      testView = void 0;
      (function() {
        var t0, t1;
        t0 = +(new Date());
        testView = new View(testModel, "threesixtyproduct");
        t1 = +(new Date());
        testModel.frames.current = 0;
        testModel.fullscreen = false;
        return testView.update();
      })();
    }
  }

  if (!isNodeJs) {
    cacheFrames = function(frameset, cb) {
      var count, i, img, _i, _ref, _results;
      frameset.loaded = [];
      count = 0;
      log("caching frameset", frameset.urls);
      _results = [];
      for (i = _i = 0, _ref = frameset.urls.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        img = new Image();
        img.onload = (function(i) {
          return function() {
            frameset.loaded[i] = +(new Date());
            if (++count === frameset.urls.length) {
              log("done caching frameset", frameset.urls);
              return typeof cb === "function" ? cb() : void 0;
            }
          };
        })(i);
        _results.push(img.src = frameset.urls[i]);
      }
      return _results;
    };
    incrementalLoad = function(model, view, cb) {
      var allLoaded, incrementalUpdate, lastSetFrame, lastTime, loadStart;
      loadStart = +(new Date());
      lastTime = void 0;
      lastSetFrame = 0;
      allLoaded = false;
      model.frames.current = 0;
      incrementalUpdate = function() {
        var count, frameTime, loadTime, maxTime, now;
        count = 0;
        maxTime = loadStart;
        while (model.frames.normal.loaded[count]) {
          maxTime = Math.max(model.frames.normal.loaded[count], maxTime);
          ++count;
        }
        if (count > model.frames.current + 1) {
          now = +(new Date());
          if (lastTime == null) {
            lastTime = now;
          }
          loadTime = (maxTime - loadStart) / count;
          frameTime = Math.max(loadTime, 1000 / model.spinOnLoadFPS);
          if (lastTime + frameTime < now) {
            while (lastTime + frameTime < now) {
              lastSetFrame = model.frames.current = Math.min(count - 1, model.frames.current + 1);
              lastTime += frameTime;
            }
            lastTime = now;
            log("incremental load animation", lastSetFrame);
            view.update();
          }
        }
        if ((model.frames.current === lastSetFrame) && (model.frames.current < model.frames.normal.urls.length - 1)) {
          return nextTick(incrementalUpdate);
        } else {
          log("finished incremental load animation");
          return typeof cb === "function" ? cb() : void 0;
        }
      };
      if (model.spinOnLoadFPS) {
        cacheFrames(model.frames.normal, function() {
          model.loading = false;
          return view.update();
        });
        log("starting incremental load animation");
        return incrementalUpdate();
      } else {
        return cacheFrames(model.frames.normal(function() {
          model.loading = false;
          view.update();
          return typeof cb === "function" ? cb() : void 0;
        }));
      }
    };
    t0 = +new Date();
    if (runTest) {
      incrementalLoad(testModel, testView, function() {
        return log("spinned " + (+new Date() - t0));
      });
    }
    tapLength = 500;
    tapDist2 = 10 * 10;
    ontouch = function(elem, callback) {
      elemAddEventListener(elem, "mousedown", function(e) {
        if (typeof e.preventDefault === "function") {
          e.preventDefault();
        }
        return callback(e);
      });
      return elemAddEventListener(elem, "touchstart", function(e) {
        if (typeof e.preventDefault === "function") {
          e.preventDefault();
        }
        return callback(e);
      });
    };
    TouchHandler = function(elem) {
      var condCall, self;
      self = this;
      this.elem = elem;
      condCall = function(fn) {
        return function(e) {
          var _ref;
          if (!self.touching) {
            return void 0;
          }
          if (typeof e.preventDefault === "function") {
            e.preventDefault();
          }
          fn.call(self, ((_ref = e.touches) != null ? _ref[0] : void 0) || e);
          return true;
        };
      };
      elemAddEventListener(document, "mousemove", condCall(this._move));
      elemAddEventListener(document, "touchmove", condCall(this._move));
      elemAddEventListener(document, "mouseup", condCall(this._end));
      elemAddEventListener(document, "touchend", condCall(this._end));
      elemAddEventListener(elem, "mousedown", function(e) {
        if (typeof e.preventDefault === "function") {
          e.preventDefault();
        }
        return self.start(e);
      });
      elemAddEventListener(elem, "touchstart", function(e) {
        if (typeof e.preventDefault === "function") {
          e.preventDefault();
        }
        return self.start(e.touches[0]);
      });
      this._reset();
      return this;
    };
    TouchHandler.prototype._reset = function() {
      this.touching = false;
      this.holding = false;
      this.startTime = +(new Date);
      return this.maxDist2 = 0;
    };
    TouchHandler.prototype._update = function(e) {
      var bounds, prevX, prevY;
      bounds = this.elem.getBoundingClientRect();
      prevX = this.x;
      prevY = this.y;
      this.x = e.clientX - bounds.left;
      this.y = e.clientY - bounds.top;
      this.dx = this.x - this.x0 || 0;
      this.dy = this.y - this.y0 || 0;
      this.ddx = this.x - prevX || 0;
      this.ddy = this.y - prevY || 0;
      this.maxDist2 = Math.max(this.maxDist2, this.dx * this.dx + this.dy * this.dy);
      return this.time = +(new Date) - this.startTime;
    };
    TouchHandler.prototype.start = function(e) {
      var _this = this;
      if (this.touching) {
        return;
      }
      this._update(e);
      this._reset();
      this.touching = true;
      this.isMouse = !e.touches;
      if (!this.isMouse) {
        e = e.touches[0];
      }
      this.x0 = this.x;
      this.y0 = this.y;
      this._update(e);
      if (typeof this.onstart === "function") {
        this.onstart();
      }
      setTimeout((function() {
        return _this._holdTimeout();
      }), tapLength);
      return true;
    };
    TouchHandler.prototype._holdTimeout = function() {
      if (this.touching && !this.holding && this.maxDist2 < tapDist2) {
        this.holding = true;
        return typeof this.onhold === "function" ? this.onhold() : void 0;
      }
    };
    TouchHandler.prototype._move = function(e) {
      this._update(e);
      return typeof this.onmove === "function" ? this.onmove() : void 0;
    };
    TouchHandler.prototype._end = function(e) {
      if (!this.touching) {
        return;
      }
      this._update(e);
      if (typeof this.onend === "function") {
        this.onend();
      }
      if (this.maxDist2 < tapDist2 && this.time < tapLength) {
        if (typeof this.onclick === "function") {
          this.onclick();
        }
      }
      return this._reset();
    };
    if (runTest) {
      testTouchHandler = new TouchHandler(testView.elems.root);
      testTouchHandler.onstart = function() {
        return log("start", this.x, this.y);
      };
      testTouchHandler.onmove = function() {
        return log("move", this.x, this.y);
      };
      testTouchHandler.onclick = function() {
        return log("click", this.x, this.y);
      };
      testTouchHandler.onhold = function() {
        return log("hold", this.x, this.y);
      };
      testTouchHandler.onend = function() {
        return log("end");
      };
    }
    controller = function(model, view) {
      var rotate, startFrame, startZoom, touchHandler, updateZoom;
      touchHandler = new TouchHandler(view.elems.root);
      startFrame = void 0;
      touchHandler.onstart = function() {
        model.showLogo = false;
        startFrame = model.frames.current;
        log("touchstart", this.x, model.frames.current);
        return view.update();
      };
      rotate = function() {
        model.frames.current = (startFrame + (this.dx / 10) >>> 0) % model.frames.normal.urls.length;
        log("touchmove", this.x, this.dx, model.frames.current);
        return view.update();
      };
      touchHandler.onmove = rotate;
      updateZoom = function() {
        model.zoom.x = this.x;
        model.zoom.y = this.y;
        return view.update();
      };
      startZoom = function() {
        var _this = this;
        nextTick(function() {
          touchHandler.start({
            clientX: _this.x,
            clientY: _this.y
          });
          model.zoom.enabled = true;
          return updateZoom.call(_this);
        });
        touchHandler.onmove = updateZoom;
        return touchHandler.onend = function() {
          model.zoom.enabled = false;
          view.update();
          touchHandler.onmove = rotate;
          return touchHandler.onend = void 0;
        };
      };
      touchHandler.onclick = function() {
        if (this.isMouse) {
          return startZoom.call(touchHandler);
        }
      };
      touchHandler.onhold = startZoom;
      ontouch(view.elems.btnZoom, function() {
        return startZoom.call(touchHandler);
      });
      return ontouch(view.elems.btnFull, function(e) {
        e.preventDefault();
        model.fullscreen = !model.fullscreen;
        return nextTick(function() {
          touchHandler.touching = false;
          return view.update();
        });
      });
    };
    if (runTest) {
      (function() {
        return controller(testModel, testView);
      })();
    }
  }

  if (!isNodeJs) {
    window.onetwo360 = function(cfg) {
      if (document.readyState !== "complete") {
        return setTimeout((function() {
          return window.onetwo360(cfg);
        }), 100);
      }
      log("onetwo360 called", cfg);
      return ajax("//embed.onetwo360.com/" + cfg.product_id, void 0, function(err, data) {
        var file, model, view, _i, _len, _ref;
        if (err) {
          throw log("error loading embed data", cfg.product_id);
        }
        data = JSON.parse(data);
        log("got and parsed data", cfg.product_id);
        model = deepCopy(defaultModel);
        model.frames.normal.width = data.width;
        model.frames.normal.height = data.height;
        model.frames.zoom.width = data.zoomWidth;
        model.frames.zoom.height = data.zoomHeight;
        model.width = cfg.request_width;
        model.height = cfg.request_height;
        _ref = data.files;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          file = _ref[_i];
          model.frames.normal.urls.push(data.baseUrl + file.normal);
          model.frames.zoom.urls.push(data.baseUrl + file.zoom);
        }
        if (cfg.dontSpinOnLoad) {
          model.spinOnLoadFPS = 0;
        }
        view = new View(model, cfg.elem_id);
        incrementalLoad(model, view);
        return controller(model, view);
      });
    };
  }

  if (isNodeJs) {
    express = require("express");
    app = express();
    app.use(function(req, res, next) {
      console.log(req.originalUrl);
      return next();
    });
    app.use("/testdata", function(req, res, next) {
      res.header('Expires', (new Date(+(new Date) + 3600 * 1000)).toUTCString());
      res.header('Cache-Control', "public");
      return next();
    });
    app.use(express["static"](__dirname));
    startTime = +(new Date());
    app.use("/api", function(req, res, next) {
      var data;
      data = "";
      req.on("data", function(d) {
        return data += d;
      });
      return req.on("end", function() {
        var e, event, _i, _len, _ref, _results;
        res.header('Access-Control-Allow-Origin', req.headers.origin || "*");
        res.header('Access-Control-Max-Age', 0);
        res.header('Access-Control-Allow-Credentials', true);
        res.header("Content-Type", "text/plain");
        res.json("{\"ok\":true}");
        res.end();
        try {
          _ref = JSON.parse(data);
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            event = _ref[_i];
            console.log((event[0] - startTime) / 1000, event);
            if (event[1] === "starting") {
              startTime = event[0];
            }
            if (process.argv[2] === "test") {
              if (event[1] === "test failed") {
                process.exit(1);
              }
              if (event[1] === "tests done") {
                _results.push(process.exit(0));
              } else {
                _results.push(void 0);
              }
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        } catch (_error) {
          e = _error;
          return console.log(e);
        }
      });
    });
    port = process.env.PORT || 4444;
    app.listen(port);
    console.log("devserver running on port " + port);
  }

}).call(this);
